# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\[\033[01;33m\]$(__git_ps1 " ( %s)")\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    # PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    PS1="\[\e]0;\h \a\]$PS1"
    ;;
*)
    ;;
esac

# Alias definitions.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi


##### FUNÇÕES #####

# Testa se comando existe
function check_command {
    command -v "$1" >/dev/null 2>&1
}

# Importa outras funções
[ -f ~/.bash_functions ] && source ~/.bash_functions

##### CONFIGURAÇÕES #####

### VARIÁVEIS DE AMBIENTE
EDITOR="vi"
if check_command nvim ; then
    EDITOR="nvim"
elif check_command vim ; then
    EDITOR="vim"
fi
export EDITOR

# Ver https://git-scm.com/book/id/v2/Appendix-A%3A-Git-in-Other-Environments-Git-in-Bash
export GIT_PS1_DESCRIBE_STYLE=default

# Guake
export GUAKE_ENABLE_WAYLAND=1

### CONFIGURA E INICIALIZA PROGRAMAS
# zoxide setup
check_command zoxide && eval "$(zoxide init --cmd cd bash)" || echo "zoxide não instalado"

# keychain setup
check_command keychain && eval "$(keychain --eval --quiet --confhost)" || echo "keychain não instalado"

# pass-store
export PASSWORD_STORE_CLIP_TIME=60

# direnv setup
check_command direnv && eval "$(direnv hook bash)"
check_command direnv && alias tmux='direnv exec / tmux'
show_virtual_env() {
  if [[ -n "$VIRTUAL_ENV" && -n "$DIRENV_DIR" ]]; then
    echo "($(basename $VIRTUAL_ENV)) "
  fi
}
export -f show_virtual_env
PS1='$(show_virtual_env)'$PS1

# Terminal guake
export GUAKE_ENABLE_WAYLAND=1
guake_config_file="$HOME/dotfiles/guake.cfg"
check_command guake && [ -f "$guake_config_file" ]  && guake --restore-preferences="$guake_config_file"

### CONFIGURAÇÕES LOCAIS
# O arquivo ~/.bash_local não é versionado
[ -f ~/.bash_local ] && source ~/.bash_local
